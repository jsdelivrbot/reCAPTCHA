// Code generated by go-bindata.
// sources:
// templates/footer.html
// templates/header-invisible.html
// templates/header.html
// templates/index.html
// templates/invisible.html
// templates/v2.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x50\x50\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\x02\x04\x00\x00\xff\xff\x0d\x30\xd3\xe9\x14\x00\x00\x00")

func templatesFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFooterHtml,
		"templates/footer.html",
	)
}

func templatesFooterHtml() (*asset, error) {
	bytes, err := templatesFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/footer.html", size: 20, mode: os.FileMode(420), modTime: time.Unix(1493980947, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderInvisibleHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\x4f\xcf\x13\x21\x10\xc6\xef\xfb\x29\x90\xcb\xfb\x36\x71\x21\x35\x31\x31\x0a\x7b\xb0\xf6\xe0\x49\x13\xbd\x78\xa4\x30\xbb\x8c\xe5\xcf\x06\x66\xbb\x36\xc6\xef\x6e\xb6\xd4\xc6\x77\x2e\x30\xcc\xf3\xf0\xe3\x09\xea\xd5\xa7\x2f\x87\xef\x3f\xbe\x1e\x99\xa7\x18\x86\x4e\xb5\xa5\x53\x1e\x8c\x1b\x3a\xc6\x18\x53\x84\x14\x60\x28\x70\x30\x33\x59\x6f\x18\xfc\x32\x71\x0e\xa0\x64\x1b\x34\x51\x04\x32\xcc\x7a\x53\x2a\x90\xe6\x0b\x8d\xfd\x3b\xce\xe4\x7d\x18\x30\x9d\x59\x81\xa0\x79\xa5\x6b\x80\xea\x01\x88\x33\x5f\x60\xd4\xdc\x13\xcd\xf5\xbd\x94\xd6\x25\x51\xcc\x3a\x21\x09\x9b\xa3\x3c\x78\x13\x4c\x31\x69\x82\x90\x65\xc4\x84\xc2\xd6\x2a\x2f\x6f\xc4\x5e\xbc\x95\x0e\x2b\xdd\x0e\x7b\x07\xa3\x59\x02\x89\x88\x69\x13\xf0\x3b\xb0\xda\x82\x33\xb1\x5a\xac\x7e\xfa\x07\x58\xd7\x55\x4c\x39\x4f\x01\x6e\x80\x02\xb6\xe5\x91\x66\x46\xf1\xb3\x3e\x0d\x4a\x36\xdb\xff\x89\x92\x89\xa0\xf9\x05\x61\x9d\x73\x21\xce\x6c\x4e\x04\x89\x34\x5f\xd1\x91\xd7\x0e\x2e\x68\xa1\xbf\x35\xaf\x19\x26\x24\x34\xa1\xaf\xd6\x04\xd0\xfb\x97\x8f\x69\xcd\x56\xe3\x92\x2c\x61\x4e\x2c\xa7\x6f\xcb\x29\x22\x3d\x53\x3e\x43\xda\xb1\xdf\x0f\xc9\x56\x2e\xdb\x25\x42\x22\x31\x01\x1d\x03\x6c\xdb\x8f\xd7\xcf\xee\x99\x3b\x88\xb9\x1f\x73\x89\x7c\x27\x6a\xbb\x60\xf7\xe1\x61\xfd\xd3\xa0\x8f\x2c\x4a\xb6\xaf\xec\xd4\x29\xbb\xeb\xd0\xfd\x0d\x00\x00\xff\xff\x0f\x82\x10\xb8\xf2\x01\x00\x00")

func templatesHeaderInvisibleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderInvisibleHtml,
		"templates/header-invisible.html",
	)
}

func templatesHeaderInvisibleHtml() (*asset, error) {
	bytes, err := templatesHeaderInvisibleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header-invisible.html", size: 498, mode: os.FileMode(420), modTime: time.Unix(1494002777, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x90\xbd\x6e\x23\x31\x0c\x84\xfb\x7d\x0a\x9e\x1a\x37\xb7\x12\x7c\xc0\x01\x41\x20\x6d\xe3\xa4\x4e\x8a\x34\x29\x19\x89\x5e\x31\xd1\xcf\x42\xa2\xbd\xf1\xdb\x07\xf1\x3a\x40\x2a\x82\x9c\x21\x3e\xcc\xd8\x3f\x0f\x4f\x87\x97\xd7\xe7\x47\x88\x92\xd3\x34\xd8\x6d\x0c\x36\x12\x86\x69\x00\x00\xb0\xc2\x92\x68\x6a\x74\xc0\x45\x7c\x44\xa0\x4f\xcc\x4b\x22\x6b\x36\x61\x33\x65\x12\x04\x1f\xb1\x75\x12\xa7\x4e\x72\x1c\xef\x14\x98\x9b\x98\xb8\x7c\x40\xa3\xe4\x54\x97\x4b\xa2\x1e\x89\x44\x41\x6c\x74\x74\x2a\x8a\x2c\xfd\xde\x18\x1f\x8a\x6e\xb8\xce\x2c\xda\xd7\x6c\x0e\x11\x13\x36\x2c\x33\xa5\x6a\x32\x17\xd6\xbe\x77\x73\xfe\xa7\xf7\xfa\xbf\x09\xdc\xe5\x7a\x1c\x03\x1d\xf1\x94\x44\x67\x2e\xdf\x06\x75\x03\x76\xdf\x78\x11\xe8\xcd\xbb\xdd\x0f\x60\x5d\x57\x3d\xd7\x3a\x27\xba\x02\x1a\xf9\x2d\x8f\xc1\x85\xf5\x7b\xdf\x4d\xd6\x6c\x6f\xbf\x13\x15\xcc\xe4\xd4\x99\x69\x5d\x6a\x13\x05\xbe\x16\xa1\x22\x4e\xad\x1c\x24\xba\x40\x67\xf6\x34\x5e\x97\xbf\xc0\x85\x85\x31\x8d\xdd\x63\x22\xb7\x57\xd3\x60\xcd\xd6\xe3\x60\xdf\x6a\xb8\x4c\xc3\x57\x00\x00\x00\xff\xff\x5b\x8b\xc7\x05\x6f\x01\x00\x00")

func templatesHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderHtml,
		"templates/header.html",
	)
}

func templatesHeaderHtml() (*asset, error) {
	bytes, err := templatesHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.html", size: 367, mode: os.FileMode(420), modTime: time.Unix(1493983655, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x0c\xbe\xf4\xfb\xa0\xb1\xa0\xbd\x05\x45\x50\x7a\x49\xa1\xe5\xfb\xe8\xa6\x97\x2e\xcb\x32\xb6\xc6\x91\xb6\xb2\xc6\x48\x8a\x83\xe9\xf6\xbf\x2f\x72\xe2\xb4\x65\xd9\x42\xf7\xa6\x99\x79\x7a\xef\xa1\x27\xe9\xf9\x19\x12\x75\xbd\xc3\x44\x50\xce\xab\x28\x0c\xa1\xa6\x50\x99\xd4\xb9\x12\x2a\x78\x79\x29\x0a\x99\xb0\x76\xa4\x0a\x00\x00\xd9\x60\x9f\x2c\x7b\x15\xe8\xfa\xea\xff\xcd\xf5\xfa\x0a\x12\xc5\x24\xc5\xdc\x3f\xa0\x52\xa6\x39\xac\x0f\x75\x78\x2d\x8e\x00\xb5\x19\x7b\x92\x22\x99\xdf\x27\x0f\xf7\xb7\xef\x07\x52\xcc\x04\xb9\x7f\xa2\x96\xa9\x66\x3d\x7e\x28\xa3\x41\x63\xc2\x85\xc3\x9a\xdc\xaa\xcc\x92\xe5\x1b\xeb\x03\x85\x68\xd9\xc3\x85\x14\x49\x7f\xbc\xf5\xe1\xfe\xb6\x54\x12\xc1\x04\x6a\x57\xa5\x18\x2e\x4a\x25\x86\x0b\x29\x50\xbd\xdf\xfb\x6a\xf5\x13\x8e\x6e\xfc\x60\xa3\xad\x1d\xc1\xc9\xdb\xa7\x1d\xd9\x99\xa3\x54\xc2\x7a\x7b\x2c\x3e\x32\x28\xc5\xf1\xfc\xa4\x38\x26\x5c\x48\x73\xa9\xd6\xbc\x87\xc4\xc7\x58\xcd\xa5\x2a\x64\xaf\x36\x86\xa6\x06\xb0\x77\x23\x44\x93\x21\x26\xbb\xcd\xb1\x1b\x84\x1f\x91\x3d\x04\x8a\x3d\xfb\x48\xe0\x19\x3a\x4c\x14\x60\x6f\x30\xc1\x2e\x52\xf0\xd8\x11\x70\x80\x1e\x63\xdc\x73\xd0\x60\x63\xee\xeb\x4a\x8a\xfe\x24\xe0\x78\x6b\x1b\xe0\x16\x06\x74\x56\x63\xb2\x7e\x3b\xa9\xf4\x81\x7b\x0a\x13\x4f\x96\xde\x39\x0d\x09\x9f\x08\x7a\x87\x0d\x1d\x1c\x61\x9b\xe5\x32\x58\xd6\x6a\x76\x55\xc5\x5d\xd3\x50\x8c\xb0\x5a\x41\x0a\x3b\x92\xa2\x56\x93\x5e\x51\xc8\x3e\x90\x2a\x9e\x0b\x80\xf2\x08\x2a\x97\x13\xe6\x67\x8b\x2e\xd2\x79\x1e\x34\x06\x9d\x23\xbf\xa5\xef\x69\x9a\xda\x8e\x62\xc2\xae\x3f\x07\x10\xe2\xb5\xcc\x86\xb3\xf0\x09\x0e\x8e\x51\xc3\x3f\x37\x5f\xfe\x83\x96\x43\x87\x09\xc6\x71\x1c\x17\x77\x77\x0b\xad\xcf\x36\x67\xeb\xf5\xb2\xeb\x96\x31\x3e\x3e\xfe\x9b\x55\x0c\xc7\x94\x4f\xa7\x5c\x42\x4c\xc1\xfa\xed\xf9\x29\xf0\xac\x62\x08\x66\xc4\x2c\x14\x6d\x22\xd8\x1b\x0a\x74\xcc\x60\xbe\xcd\x7b\x8c\x10\xd9\x0d\xa4\x33\x31\x85\xc0\x61\xd1\xb0\xa6\xec\xfe\x6b\x55\x55\xdf\xde\x10\xf3\xf4\x5a\xd1\x15\x2f\x85\x14\xd3\x61\x14\x77\x1c\x08\xac\x3f\x78\xce\xaf\x02\x6b\xde\x25\xc8\x59\x07\xba\x3e\xe4\xbc\xe7\xf0\x14\xa1\x41\x0f\x35\x41\xcb\x3b\xaf\x21\x1b\x59\xc2\xe9\x1e\x9a\x94\xfa\xb8\x14\x42\xd3\x40\x2e\xe7\x16\xab\x2d\xf3\xd6\x51\xd5\x70\x27\x0e\xd1\x34\x06\x85\xe6\x26\x8a\x81\x82\x6d\xc7\x52\xfd\xc5\xa6\x7c\xb1\x8b\xe2\x0f\x9f\x58\xcb\x9c\xde\x7f\x62\xbf\x02\x00\x00\xff\xff\xff\x0b\xe2\x99\xee\x04\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1262, mode: os.FileMode(420), modTime: time.Unix(1494001048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInvisibleHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x94\x4b\x6b\xdb\x40\x10\xc7\xef\xfe\x14\xc3\x5c\x72\x52\x94\x14\x1a\x42\xab\x0d\x18\x7a\xe8\x23\xd0\x40\x30\xb4\xa7\xb2\xd6\x8e\xad\x6d\xf6\xd5\xdd\x91\x1f\x0d\xf9\xee\x45\x8a\x6c\xc9\xa9\x1c\x30\x94\xfa\xe2\x99\xfd\xef\xcc\xec\xfc\xb4\x3b\x8f\x8f\xc0\x64\x83\x91\x4c\x80\x3b\x2b\xe5\x15\x49\x45\x31\xd3\x6e\xa5\x93\x9e\x1b\x3a\xaf\xd8\x1a\x84\x73\x78\x7a\x9a\x4c\x0a\xa5\x57\x50\x1a\x99\x92\xc0\xd2\x3b\x96\xda\x51\xc4\x9b\x09\x00\xc0\x50\x8b\x7e\xdd\xad\xbe\x54\x4a\x6f\xb2\x64\x87\x62\xae\xf4\xea\xb5\xbd\xd9\xe5\x1b\x68\x2c\xab\xb2\xeb\xd6\x30\xcb\xec\x6a\x90\xa0\x8d\x5a\xf8\x68\x41\x2b\x81\x8a\xac\xcf\x1a\x0f\x41\x96\xac\xbd\x13\x98\x07\x9f\x18\xc1\x12\x57\x5e\x09\x6c\xbd\xc3\xf0\x36\x85\x76\xa1\x66\xe0\x6d\x20\x81\x95\x56\x8a\x1c\x82\x93\x96\x04\xee\x59\x20\xac\xa4\xa9\x49\xe0\xe5\x58\x82\x85\x26\xa3\x12\xf1\xdf\x52\x2b\x1b\x5a\x92\x53\x37\xb7\x7e\xa9\x1d\x34\x27\x2c\xf2\x6e\x69\x7c\xff\x00\x44\x7b\xb4\x6c\x19\x7d\x1d\x60\x61\x6a\xad\x46\xca\xf7\x75\xe4\x9c\x4c\x53\x40\x60\x9d\x28\x36\x2d\x20\x24\xde\x1a\x12\xb8\xd6\x8a\xab\x77\x70\x7d\x11\x36\xef\xf1\x66\xd6\xc9\x45\xde\xc6\xbc\x92\x73\xc8\x86\x69\xc3\x7b\x10\x3b\x44\x7d\xa5\xe6\x23\xf4\x5e\x30\xb2\xa4\xca\x1b\x45\xc3\xe3\x1c\xe9\xf8\xf0\x26\xfc\x6b\x18\x41\xa6\xb4\xf6\x51\x1d\x81\x71\xd7\xc9\xa7\xc1\xe8\x93\xbe\x00\xd2\x0b\x0d\x90\xde\x3b\x00\xb2\x5f\xfe\x7f\x40\xe6\x35\xb3\x77\xbb\xd0\x65\x16\xa9\x94\x81\xcb\x4a\x42\x88\xda\xca\xb8\x45\x50\x92\x65\x96\x34\xd3\x03\x6d\x05\x5e\xdd\x2e\xe4\xa7\xfb\xe9\x6c\xda\xfc\x3e\xce\xee\xde\x7e\x53\xfa\x83\xf7\x9b\x8b\xf8\x39\xfc\xf8\xf9\xc5\x7c\xff\xaa\xa6\xb3\x5f\xbf\x57\x5d\x5c\x29\x8d\x99\xcb\xf2\x41\x9c\x79\x77\x5f\xcf\xad\xe6\xb3\xe7\x2b\x5f\xe4\xcf\xa5\x4f\x6a\xb5\xc8\xc7\x1f\x55\x91\x37\x0f\xe8\x84\x21\x32\x3e\x70\x3a\x73\xb2\xfb\x3f\x32\x12\x17\xde\x33\xc5\xe1\x20\xfc\x13\x00\x00\xff\xff\xe6\xe2\x07\x76\x3c\x05\x00\x00")

func templatesInvisibleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesInvisibleHtml,
		"templates/invisible.html",
	)
}

func templatesInvisibleHtml() (*asset, error) {
	bytes, err := templatesInvisibleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/invisible.html", size: 1340, mode: os.FileMode(420), modTime: time.Unix(1494003013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesV2Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x10\xbc\xbb\xde\x76\x28\x8a\xcd\x0e\xd0\x5b\x81\xb4\xc0\xb0\xb5\x97\x5e\x06\xd5\x62\x6c\xad\xfa\x82\x44\xc7\x35\x8a\xfe\xf7\xc1\x8e\xb3\x28\x9d\x13\x20\xc0\x50\x5f\x4c\xf2\x91\x7c\xd4\xb3\xc5\xd7\x57\x60\x32\x5e\x0b\x26\xc0\x9d\x15\xf3\x86\x84\xa4\x70\xd1\xb0\xd1\x08\x17\xf0\xf6\xb6\x58\x14\x52\x6d\xa0\xd2\x22\xc6\x12\x2b\x67\x59\x28\x4b\x01\x97\x0b\x00\x80\x14\x0b\xae\x9b\xa2\xef\x91\xca\xe9\x2c\x9a\x14\xcc\xa5\xda\x9c\xca\xcd\x3e\x7f\x81\xc1\x32\x32\xbb\x1a\x0d\x5d\x67\x97\x49\x83\xb1\x6a\xed\x82\x01\x51\xb1\x72\xb6\xc4\xdc\xbb\xc8\x08\x86\xb8\x71\xb2\xc4\xd1\x3b\xcc\xdf\xd6\x28\xd2\x32\x12\xff\x0b\x8d\xb0\xa6\x9a\xac\x5c\xde\xba\x5a\x59\x18\xfa\x17\xf9\x14\x9a\xcf\x4f\x06\x57\xd6\xb7\x9c\xd5\xc1\xb5\x1e\xd6\xba\x55\x72\x86\x7e\xcf\x23\x9e\x48\x0f\x04\x25\xb6\x91\x82\x15\x86\x10\x22\xf7\x9a\x4a\xec\x94\xe4\xe6\x2b\x5c\x7d\xf2\x2f\xdf\x70\xf9\x30\xc1\x45\x3e\xd6\x9c\xe8\x39\x0e\x00\xdc\x7b\x2a\x91\xe9\x85\x11\x36\x42\xb7\x54\x22\xc2\xd0\x20\x65\x52\x32\xf5\xbc\x16\x15\x35\x4e\x4b\x4a\xc7\x39\x72\xe2\xc3\x2f\xf7\xbf\xc5\xf0\x22\xc6\xce\x05\x79\x44\x8c\xef\x13\x7c\x9e\x18\xfb\xa6\xef\x04\xd9\x03\x83\x20\x7b\xef\x40\x90\xbf\xe1\x8f\x13\xe4\xa9\x65\x76\x76\x57\xea\x83\x32\x22\xf4\xb8\xfd\x2b\x8b\x7c\x8b\x9e\x28\x4f\x68\xeb\x2c\x50\x25\x3c\x57\x8d\x40\x90\x82\x45\x16\x15\xd3\x33\xf5\x25\x5e\xde\x52\x77\xd3\x5f\x3f\x5c\x0f\xcf\x4a\xaf\x9e\xe5\xe6\xf1\xa6\x57\x2b\xd5\xdd\x3f\xfa\xdf\x77\x3f\x9a\xbb\x7b\xb5\xfe\xf5\x73\x85\xcb\x53\x47\x9c\x87\x8a\x7c\xfe\x9e\x15\xf9\x70\xa7\xce\xd8\x03\xf3\x3b\x63\x32\x17\xbb\xf7\x91\x5d\xb6\x76\x8e\x0f\x77\xd9\x9f\x00\x00\x00\xff\xff\x26\xe5\x89\xd9\xf5\x04\x00\x00")

func templatesV2HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesV2Html,
		"templates/v2.html",
	)
}

func templatesV2Html() (*asset, error) {
	bytes, err := templatesV2HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/v2.html", size: 1269, mode: os.FileMode(420), modTime: time.Unix(1494000596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/footer.html": templatesFooterHtml,
	"templates/header-invisible.html": templatesHeaderInvisibleHtml,
	"templates/header.html": templatesHeaderHtml,
	"templates/index.html": templatesIndexHtml,
	"templates/invisible.html": templatesInvisibleHtml,
	"templates/v2.html": templatesV2Html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{templatesFooterHtml, map[string]*bintree{}},
		"header-invisible.html": &bintree{templatesHeaderInvisibleHtml, map[string]*bintree{}},
		"header.html": &bintree{templatesHeaderHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"invisible.html": &bintree{templatesInvisibleHtml, map[string]*bintree{}},
		"v2.html": &bintree{templatesV2Html, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
